// pH Sensor Setup
#define SensorPin A2 //pH meter Analog output to Arduino Analog Input 0
#define Offset 0.00 //deviation compensate
#define LED 13
#define samplingInterval 20
#define printInterval 800
#define ArrayLenth 40 //times of collection
int pHArray[ArrayLenth]; //Store the average value of the sensor feedback
int pHArrayIndex=0;

// Temp Sensor Setup
#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 2 // Data wire is plugged into port 2 on the Arduino
OneWire oneWire(ONE_WIRE_BUS); // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
DallasTemperature sensors(&oneWire); // Pass our oneWire reference to Dallas Temperature.
int static_variable = 20; // Sets a static variable to keep graph scale constant

// Winch Motor Setup
const int PWMA = 3 ; //initializing pin 2 as PWMA
const int AIN1 = 4 ;
const int AIN2 = 7 ;
bool pHDone = false;
bool TempDone = false;
bool Settled = false;

class GlobalVariable {
      public:
           int GetphDone() {
              return pHDone;
           }
           int GetTempDone() {
              return TempDone;
           }
           void TempUpdate(bool newTemp){
              TempDone = newTemp;
           }
           void pHUpdate(bool newpH){
              pHDone = newpH;
           }
      private:
           bool pHDone = false;
           bool TempDone = false;
};

GlobalVariable DoneCheck;

void setup(void)
{
    pinMode(LED,OUTPUT);
    Serial.begin(9600);
    Serial.println("pH meter experiment!"); //Test the serial monitor
    sensors.begin();
    pinMode(PWMA, OUTPUT);
    pinMode(AIN1, OUTPUT);
    pinMode(AIN2, OUTPUT);
}

void loop(){
  WinchStop();
  Serial.println(Settled);

  while(Settled == false){
    float Temp= TempSample();
    float pH = pHSample();
    if(DoneCheck.GetTempDone() == 1){
      Serial.println("TEMPDONE");
    }
    if(DoneCheck.GetphDone() == 1){
      Serial.println("PHDONE");
    }

    if(DoneCheck.GetphDone() == 1 && DoneCheck.GetTempDone() == 1){
      Settled = true;
      Serial.println();
      Serial.println();
      Serial.println();
      Serial.println((String) "Final Readings: Temp = " + Temp + ", pH = " + pH);
      WinchUp(255);   // Max speed
      delay(10000);
      continue;
    }

    
    Serial.println((String) "Temp = " + Temp + ", pH = " + pH);
  }

  
  //delay(3000);
  //WinchStop();
  //delay(1000);
  //WinchDown(255); // Max speed
  //delay(3000);
  //WinchStop();
  //delay(1000);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Temperature Sensor
float TempSample()
{
  static float currentTemp, previousTemp, Tempdifference;
  sensors.requestTemperatures(); // Send the command to get temperatures
  float tempC = sensors.getTempCByIndex(0);

  // Check if reading was successful
  if (tempC != DEVICE_DISCONNECTED_C)
  {
    currentTemp = tempC;
    Tempdifference = currentTemp - previousTemp;
    Serial.print("Temp Diff = ");
    Serial.println(Tempdifference);
    previousTemp = currentTemp;
    if (abs(Tempdifference) == 0){
      //Serial.println(" TEMP FINISHED, WINCH UP");
      bool TempDone = true;
      DoneCheck.TempUpdate(TempDone);
    }
    else{
      bool TempDone = false; 
      DoneCheck.TempUpdate(TempDone);
    }
    return tempC;
  }
  else
  {
    Serial.println("Error: Could not read temperature data");
  }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// pH Sensor
float pHSample()
{
  static unsigned long samplingTime = millis();
  static unsigned long printTime = millis();
  static float pHValue,voltage, currentValue, previousValue, difference;
  if(millis()-samplingTime > samplingInterval)
  {
    pHArray[pHArrayIndex++]=analogRead(SensorPin);
    if(pHArrayIndex==ArrayLenth)pHArrayIndex=0;
    voltage = avergearray(pHArray, ArrayLenth)*5.0/1024;
    pHValue = (((voltage-1.91)*100/7.6666667)+7)+Offset;
    samplingTime=millis();

    currentValue = pHValue;
    difference = currentValue - previousValue;
    Serial.print("pH diff = ");
    Serial.println(difference);
    previousValue = currentValue;
    if (abs(difference) == 0){
      //Serial.println("PH FINISHED, WINCH UP");
      bool pHDone = true;
      DoneCheck.pHUpdate(pHDone);
    }
    else{
      bool pHDone = false;
      DoneCheck.pHUpdate(pHDone);
    }
    //delay(2000);
  }
  return pHValue;
}

double avergearray(int* arr, int number){
  int i;
  int max,min;
  double avg;
  long amount=0;
  if(number<=0){
    Serial.println("Error number for the array to avraging!/n");
    return 0;
  }
  if(number<5){ //less than 5, calculated directly statistics
    for(i=0;i<number;i++){
      amount+=arr[i];
    }
    avg = amount/number;
    return avg;
  }else{
    if(arr[0]<arr[1]){
      min = arr[0];max=arr[1];
    }
    else{
      min=arr[1];max=arr[0];
    }
    for(i=2;i<number;i++){
      if(arr[i]<min){
        amount+=min; //arr<min
        min=arr[i];
      }else {
        if(arr[i]>max){
          amount+=max; //arr>max
          max=arr[i];
        }else{
          amount+=arr[i]; //min<=arr<=max
        }
      }//if
    }//for
    avg = (double)amount/(number-2);
  }//if
  return avg;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Winch
// Function to rotate motor clockwise
void WinchUp(int speed) {
   digitalWrite(AIN1, HIGH);
   digitalWrite(AIN2, LOW);
   analogWrite(PWMA, speed);
}

// Function to rotate motor anticlockwise
void WinchDown(int speed) {
   digitalWrite(AIN1, LOW);
   digitalWrite(AIN2, HIGH);
   analogWrite(PWMA, speed);
}

// Function to stop motor
void WinchStop() {
   digitalWrite(AIN1, HIGH);
   digitalWrite(AIN2, HIGH);
}

